---
#--------------------------------------------------------------------
# REQUIRED: pipeline-specific configuration for actions, options and dependencies
#--------------------------------------------------------------------
pipeline:
    name: demo
    description: "a working pipeline demo that performs simple text and plotting actions"
    version: v0.0.1

#--------------------------------------------------------------------
# REQUIRED: pipeline-specific actions, called as 'mdi <pipelineName> <action> [options]', etc.
# by convention, if there is only a single action it is called 'do'
#--------------------------------------------------------------------
actions: 
    # OPTIONAL: family lists in _global are prepended to every action
    # allows common options or creating one conda environment for all actions 
    _global:   
        environment: mdi-demo # environment name; if omitted, uses an automated, sharable name
        condaFamilies:
            - base
            - r-4.1   
            - snakemake      
        optionFamilies:
            - demo      # this is a private options module
    do:
        order: 1
        thread: do
        resources:
            required:
                total-ram: 2G
            recommended: 
                n-cpu: 1
                ram-per-cpu: 2G
        job-manager:
            recommended:
                time-limit: 1:00:00
        description: "list files in a directory, make a plot, print a table, and sleep for 15 seconds"      
    snakemake:
        order: 2
        thread: snakemake
        optionFamilies:
            - snakemake # this is a shared options module
        resources:
            required:
                total-ram: 4G
            recommended: 
                n-cpu: 2
                ram-per-cpu: 2G
        job-manager:
            recommended:
                time-limit: 1:00:00
        description: "does the same thing as 'do', but uses snakemake in Workflow.sh"

#--------------------------------------------------------------------
# OPTIONAL: pipeline-specific conda dependencies; overrides any shared environment configs
#--------------------------------------------------------------------
#condaFamilies:

#--------------------------------------------------------------------
# OPTIONAL: options available to action commands, organized into families for clarity
# use this section to:
#   - add a new, pipeline-specific option family
#   - override keyed parameters of shared optionFamilies invoked above
#   - append to arrayed parameters of inherited options       
#--------------------------------------------------------------------
optionFamilies:     
    demo:
        options:
            input-dir: 
                order: 1
                short: i
                type: string
                required: true
                default: null
                directory:
                    must-exist: true
                    bind-mount: true # options with 'directory' key are bind-mounted to containers by default
                description: "the directory whose contents will be listed in the output"   
            option-1:
                order: 2
                short: a
                type: integer
                required: false
                default: 99
                description: "this is an optional integer configuration option"
            option-2: 
                order: 3
                short: b
                type: boolean
                required: false
                default: false
                description: "this is an optional boolean (i.e, logical flag) option"
    
#--------------------------------------------------------------------
# OPTIONAL: create an output package for loading into Stage2 App(s)
#--------------------------------------------------------------------
package:
    do: # the pipeline action after which a data package should assembled
        uploadType: demoData # a signal to the Stage 2 framework regarding the package contents
        files:
            directoryContents:
                type: file-list
                file: $DATA_FILE_PREFIX.directoryContents.txt
            dataFrame:
                type: sample-value-matrix
                header: true
                separator: comma
                file: $DATA_FILE_PREFIX.mtcars.csv

#--------------------------------------------------------------------
# OPTIONAL: enable version-controlled Singularity containers for this pipeline
#--------------------------------------------------------------------
container:
    supported: true    # set to true if you maintain a container registry for this pipeline [false]
    registry:  ghcr.io  # domain name of your OCI-compatible, oras-accessible, container registry [ghcr.io]
    owner:     MiDataInt # REQUIRED: the name of the owner, e.g., user or organization, at 'registry'
    installer: apt-get  # the installer program used by the container OS, typically apt-get or yum [apt-get]
